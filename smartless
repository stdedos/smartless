#!/usr/bin/env bash

# smartless - a pager similar to less, but smarter
#
# works like the pager 'less', but does not enter the pager mode if the
# document is short
# inspired by code at http://unix.stackexchange.com/questions/107315/

# ------------------------------------------------------------------------------

# Copyright 2015 Stefan Heule
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# ------------------------------------------------------------------------------

# Unit test ideas:
# * All TODO: ComponentTest notes
# * As git-pager with small and screenful of output
# * File with small and screenful of output, with and without \n at EOF

# '-H' (one of the few arguments that less does not accept) or
# --hold-pollute (coming from -H):
# Output to half the screen instead of filling it up
#
# Does not work with SMARTLESS_NUM_LINES set
if [[ "$*" =~ -[a-zA-Z]*H || "$*" =~ --hold-pollute && -z "${SMARTLESS_NUM_LINES}" ]] ; then
  SMARTLESS_HOLD_POLLUTE=2
else
  SMARTLESS_HOLD_POLLUTE=1
fi

# number of lines to directly display before entering the pager
if [ -z "${SMARTLESS_NUM_LINES}" ] ; then
  # default to 5 lines less than the screen height, if it can be discovered
  SMARTLESS_NUM_LINES="$(tput lines)"
  SMARTLESS_NUM_LINES="${SMARTLESS_NUM_LINES:+$(( (SMARTLESS_NUM_LINES - 5) / SMARTLESS_HOLD_POLLUTE ))}"
  # fall back to 15 lines
  SMARTLESS_NUM_LINES="${SMARTLESS_NUM_LINES:-15}"
fi

# the pager to be used
[ -z "${SMARTLESS_PAGER}" ] && SMARTLESS_PAGER='less'

# the default arguments to the pager
[ -z "${SMARTLESS_PAGER_ARGUMENTS}" ] && SMARTLESS_PAGER_ARGUMENTS='-iR'

# if a file name is passed, read it
isfile=0
file=""
args=()
nextisarg=0
haspattern=0
for var ; do
  if (( nextisarg == 1 )); then
    nextisarg=0
    args+=("${var}")
    continue
  fi
  # ignore less arguments
  if [[ ! $var = -* ]] && [[ ! $var = +* ]]; then
    ((isfile++))
    file="$var"
  else
    if [[ $var == "-p" ]] ||
       [[ $var == "--pattern" ]]; then
      haspattern=1
    fi
    if [[ $var == "-b" ]] ||
       [[ $var == "-h" ]] ||
       [[ $var == "-j" ]] ||
       [[ $var == "-k" ]] ||
       [[ $var == "-o" ]] ||
       [[ $var == "-O" ]] ||
       [[ $var == "-p" ]] ||
       [[ $var == "-P" ]] ||
       [[ $var == "-t" ]] ||
       [[ $var == "-T" ]] ||
       [[ $var == "-x" ]] ||
       [[ $var == "-y" ]] ||
       [[ $var == "-z" ]] ||
       [[ $var == "-#" ]]; then
      nextisarg=1
    fi
    args=("$var")
  fi
done

# if more than one file provided on cmdline, revert to original less ...
if (( isfile > 1 )); then
  exec "${SMARTLESS_PAGER}" "${SMARTLESS_PAGER_ARGUMENTS}" "$@"
elif (( haspattern == 1 )); then
  exec "${SMARTLESS_PAGER}" "${SMARTLESS_PAGER_ARGUMENTS}" "$@"
fi

# if stdout is not a terminal its probably been redirected, so skip pager ...
if [ ! -t 1 ] ; then
    if (( isfile == 1 )); then
        exec cat "$file"
    else
        exec cat
    fi
fi

if (( isfile == 1 )); then
  # if LESSOPEN is defined then try to use it ...
  if [[ -n "${LESSOPEN}" ]]; then
    lpcmd=$(echo "${LESSOPEN}" | sed 's/ %s//' | sed 's/|-/|/' | sed 's/||/|/' | awk -F\| '{print $2}')
    ${lpcmd} "${file}" | "${BASH_SOURCE[0]}" "${args[@]}"
    exit $?
  else
    "${BASH_SOURCE[0]}" "${args[@]}" < "${file}"
    exit $?
  fi
fi

# Cleanup -H or --hold-pollute
if [ "${SMARTLESS_HOLD_POLLUTE}" -ne 2 ] ; then
  ARGS=("${@}")
else
  ARGS=()
  for arg ; do
    arg=${arg//H/}
    arg=${arg//--hold-pollute/}
    [ -z "${arg//-/}" ] && continue
    ARGS+=("${arg}")
  done
fi

# number of lines to show before switching to less
nlines=$SMARTLESS_NUM_LINES

n=0
lines=
newline=$'\n'

# read and display enough lines to fill most of the terminal (nlines many lines)
while [ $n -lt "${nlines}" ] && IFS= read -r line; do
  lines="${lines}${line}${newline}"
  line=''
  n=$((n + 1))
done

# For input with no trailing `\nEOF`
# TODO: ComponentTest: `printf '1' | smartless`
if [ -n "${line}" ]; then
  lines="${lines}${line}"
fi

# if the input is longer, run the pager
if IFS= read -r line; then
  {
    printf '%s' "${lines}"
    printf '\033[38;5;2m... (more shown in %s)\033[0m\n' "${SMARTLESS_PAGER}"
  } >&2
  { printf '%s%s\n' "${lines}" "${line}"; exec cat; } | exec "${SMARTLESS_PAGER}" "${SMARTLESS_PAGER_ARGUMENTS}" "${ARGS[@]}"
else
  # TODO: ComponentTest: `printf '1\n2\n3' | smartless`
  printf '%s' "${lines}"
fi
